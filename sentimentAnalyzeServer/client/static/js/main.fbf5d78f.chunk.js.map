{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","emotions","Object","keys","this","props","console","log","className","map","emotion","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","placeholder","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","label","output","style","color","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fbf5d78f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./bootstrap.min.css\";\r\n\r\nclass EmotionTable extends React.Component {\r\n  render() {\r\n    let emotions = Object.keys(this.props.emotions);\r\n    return (\r\n      <div>\r\n        {/*You can remove this line and the line below. */}\r\n        {/*JSON.stringify(this.props.emotions)*/}\r\n        {console.log(Object.keys(this.props.emotions))}\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {\r\n              //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\r\n              emotions.map((emotion) => {\r\n                return (\r\n                  <tr key={emotion}>\r\n                    <td>{emotion}</td>\r\n                    <td>{this.props.emotions[emotion]}</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default EmotionTable;\r\n","import \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport EmotionTable from \"./EmotionTable.js\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\r\n    mode: \"text\",\r\n    sentimentOutput: [],\r\n    sentiment: true,\r\n  };\r\n\r\n  renderTextArea = () => {\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if (this.state.mode === \"url\") {\r\n      this.setState({\r\n        innercomp: (\r\n          <textarea\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            id=\"textinput\"\r\n            placeholder=\"You should be really happy right now\"\r\n          />\r\n        ),\r\n        mode: \"text\",\r\n        sentimentOutput: [],\r\n        sentiment: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  renderTextBox = () => {\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if (this.state.mode === \"text\") {\r\n      this.setState({\r\n        innercomp: (\r\n          <textarea\r\n            rows=\"1\"\r\n            cols=\"50\"\r\n            id=\"textinput\"\r\n            placeholder=\"https://en.wikipedia.org/wiki/Happiness\"\r\n          />\r\n        ),\r\n        mode: \"url\",\r\n        sentimentOutput: [],\r\n        sentiment: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({ sentiment: true });\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if (this.state.mode === \"url\") {\r\n      url =\r\n        url +\r\n        \"/url/sentiment?url=\" +\r\n        document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url =\r\n        url +\r\n        \"/text/sentiment?text=\" +\r\n        document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response) => {\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n      console.log(response);\r\n\r\n      this.setState({ sentimentOutput: response.data.label });\r\n      let output = response.data.label;\r\n      if (response.data.label === \"positive\") {\r\n        output = (\r\n          <div style={{ color: \"green\", fontSize: 20 }}>\r\n            {response.data.label}\r\n          </div>\r\n        );\r\n      } else if (response.data.label === \"negative\") {\r\n        output = (\r\n          <div style={{ color: \"red\", fontSize: 20 }}>\r\n            {response.data.label}\r\n          </div>\r\n        );\r\n      } else {\r\n        output = (\r\n          <div style={{ color: \"yellow\", fontSize: 20 }}>\r\n            {response.data.label}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      if (response.data === \"Error\") {\r\n        output = (\r\n          <div style={{ color: \"#ff2222\" }}>\r\n            Error insert a valid text or URL as shown in the placeholder\r\n          </div>\r\n        );\r\n      }\r\n      this.setState({ sentimentOutput: output });\r\n    });\r\n  };\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({ sentiment: false });\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if (this.state.mode === \"url\") {\r\n      url =\r\n        url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url =\r\n        url +\r\n        \"/text/emotion/?text=\" +\r\n        document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response) => {\r\n      console.log(response);\r\n      this.setState({\r\n        sentimentOutput: <EmotionTable emotions={response.data} />,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>\r\n          Text\r\n        </button>\r\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>\r\n          URL\r\n        </button>\r\n        <br />\r\n        <br />\r\n        {this.state.innercomp}\r\n        <br />\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>\r\n          Analyze Sentiment\r\n        </button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>\r\n          Analyze Emotion\r\n        </button>\r\n        <br />\r\n        {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}